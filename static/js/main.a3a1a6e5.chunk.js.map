{"version":3,"sources":["reportWebVitals.js","constants.js","reducers.js","components/Cards/Card.jsx","components/Cards/CardList.jsx","components/SearchBox/SearchBox.jsx","components/Scroll/Scroll.jsx","components/ErrorBoundry/ErrorBoundry.jsx","components/Header/Header.jsx","containers/App/App.jsx","actions.js","serviceWorkerRegistration.js","index.jsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchfield","initialStateRobots","isPending","robots","error","Card","name","email","id","className","alt","src","Cardlist","map","user","i","SearchBox","searchChange","style","boxShadow","position","zIndex","aria-label","type","placeholder","onChange","Scroll","props","overflowY","height","children","ErrorBoundry","state","hasError","info","this","setState","Component","Header","nextProps","nextState","connect","searchRobots","requestRobots","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","CardList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"sNAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCPDQ,G,MAAqB,sBAErBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAwB,wBCG/BC,EAAqB,CACvBC,YAAa,IAYXC,EAAqB,CACvBC,WAAW,EACXC,OAAQ,GACRC,MAAO,I,OCTIC,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACxB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,mBACrB,gCACI,6BAAKF,IACL,4BAAIC,WCcLK,EAnBE,SAAC,GAAc,IAAbT,EAAY,EAAZA,OACf,OACI,8BAEQA,EAAOU,KAAI,SAACC,EAAMC,GACd,OACI,cAAC,EAAD,CAEIP,GAAIL,EAAOY,GAAGP,GACdF,KAAMH,EAAOY,GAAGT,KAChBC,MAAOJ,EAAOY,GAAGR,OAHZJ,EAAOY,GAAGP,UCa5BQ,EArBG,SAAC,GAAgC,EAA/BhB,YAAgC,IAAnBiB,EAAkB,EAAlBA,aAC7B,OACI,qBACIR,UAAU,MACVS,MAAO,CACHC,UAAW,mBACXC,SAAU,WACVC,OAAQ,KALhB,SAQI,uBACIC,aAAW,gBACXb,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUR,OCPXS,EARA,SAACC,GACZ,OACI,qBAAKT,MAAO,CAACU,UAAW,SAAUC,OAAQ,SAA1C,SACKF,EAAMG,Y,4BCiBJC,E,kDAnBX,WAAYJ,GAAQ,IAAD,8BACf,cAAMA,IACDK,MAAQ,CACTC,UAAU,GAHC,E,qDAOnB,SAAkB7B,EAAO8B,GACrBC,KAAKC,SAAS,CAACH,UAAU,M,oBAG7B,WACI,OAAIE,KAAKH,MAAMC,SACJ,yDAEJE,KAAKR,MAAMG,a,GAhBCO,aCSZC,E,2KARX,SAAsBC,EAAWC,GAC7B,OAAO,I,oBAEX,WACI,OAAO,oBAAI/B,UAAU,KAAd,6B,GALM4B,a,MCoENI,mBA1DS,SAAAT,GACpB,MAAO,CACHhC,YAAagC,EAAMU,aAAa1C,YAChCG,OAAQ6B,EAAMW,cAAcxC,OAC5BD,UAAW8B,EAAMW,cAAczC,UAC/BE,MAAO4B,EAAMW,cAAcvC,UAIR,SAAAwC,GACvB,MAAO,CACHC,eAAgB,SAAAC,GAAK,OAAIF,GChBFG,EDgB0BD,EAAME,OAAOC,MChB7B,CACrC1B,KAAM5B,EACNuD,QAASH,KAFiB,IAACA,GDiBvBI,gBAAiB,kBAAMP,GCZI,SAACA,GAChCA,EAAS,CAACrB,KAAM3B,IAChBwD,MAAM,8CACD/D,MAAK,SAAAgE,GAAQ,OAAIA,EAASC,UAC1BjE,MAAK,SAAAkE,GAAI,OAAIX,EAAS,CAACrB,KAAM1B,EAAwBqD,QAASK,OAC9DC,OAAM,SAAApD,GAAK,OAAIwC,EAAS,CAACrB,KAAMzB,EAAuBoD,QAAS9C,cDqDzDqC,EA1Cf,SAAad,GAAQ,IAEb3B,EAKA2B,EALA3B,YACA6C,EAIAlB,EAJAkB,eACAM,EAGAxB,EAHAwB,gBACAhD,EAEAwB,EAFAxB,OACAD,EACAyB,EADAzB,UAGJuD,qBAAU,WACFN,MACD,IAEP,IAAMO,EAAiBvD,EAAOwD,QAAO,SAAAC,GACjC,OAAOA,EAAMtD,KAAKuD,cAAcC,SAC5B9D,EAAY6D,kBAIpB,OAAI3D,EAEI,sBAAKO,UAAU,KAAf,UACI,cAAC,EAAD,IACA,+CAKJ,sBAAKA,UAAU,KAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAWQ,aAAc4B,IACzB,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAACkB,EAAD,CAAU5D,OAAQuD,cEjDpCM,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTlF,MAAK,SAACuF,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfyC,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,+GAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BpB,OAAM,SAACpD,GACN8E,QAAQ9E,MAAM,4CAA6CA,MClFjE,IAAMkF,EAAcC,YAAgB,CAAE7C,aVDV,WAA0C,IAAzCV,EAAwC,uDAAlCjC,EAAoByF,EAAc,uDAAP,GAC1D,OAAQA,EAAOjE,MACX,KAAK5B,EACD,OAAO8F,OAAOC,OAAO,GAAI1D,EAAO,CAAChC,YAAawF,EAAOtC,UACzD,QACI,OAAOlB,IUJiCW,cVcvB,WAA0C,IAAzCX,EAAwC,uDAAlC/B,EAAoBuF,EAAc,uDAAP,GAC3D,OAAOA,EAAOjE,MACV,KAAK3B,EACD,OAAO6F,OAAOC,OAAO,GAAI1D,EAAO,CAAC9B,WAAW,IAChD,KAAKL,EACD,OAAO4F,OAAOC,OAAO,GAAI1D,EAAO,CAAC7B,OAAQqF,EAAOtC,QAAShD,WAAW,IACxE,KAAKJ,EACD,OAAO2F,OAAOC,OAAO,GAAI1D,EAAO,CAAC5B,MAAOoF,EAAOtC,QAAShD,WAAW,IACvE,QACI,OAAO8B,MUtBb2D,EAAQC,YAAYN,EAAaO,YAAgBC,MAEvDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SDDnB,SAAkB3B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI2B,IAAIC,qBAAwBnC,OAAOC,SAASmC,MACpDC,SAAWrC,OAAOC,SAASoC,OAIvC,OAGFrC,OAAOsC,iBAAiB,QAAQ,WAC9B,IAAMjC,EAAK,UAAM8B,qBAAN,sBAEPrC,IAgEV,SAAiCO,EAAOC,GAEtCpB,MAAMmB,EAAO,CACXkC,QAAS,CAAE,iBAAkB,YAE5BpH,MAAK,SAACgE,GAEL,IAAMqD,EAAcrD,EAASoD,QAAQE,IAAI,gBAEnB,MAApBtD,EAASuD,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpC,UAAUC,cAAcoC,MAAMzH,MAAK,SAACuF,GAClCA,EAAamC,aAAa1H,MAAK,WAC7B6E,OAAOC,SAAS6C,eAKpB1C,EAAgBC,EAAOC,MAG1BhB,OAAM,WACL0B,QAAQC,IAAI,oEAtFV8B,CAAwB1C,EAAOC,GAI/BC,UAAUC,cAAcoC,MAAMzH,MAAK,WACjC6F,QAAQC,IACN,+GAMJb,EAAgBC,EAAOC,OCpB/B0C,GAKAhI,M","file":"static/js/main.a3a1a6e5.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n    searchfield: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchfield: action.payload});\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true});\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state;\n\n    }\n}","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src ={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst Cardlist = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={robots[i].id}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div\n            className='pa2'\n            style={{\n                boxShadow: '0 15px 15px #222',\n                position: 'relative',\n                zIndex: '1'\n            }}\n        >\n            <input\n                aria-label='Search Robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true});\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oops. That is not good.</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header;","import React, { useEffect } from 'react';\nimport {connect} from 'react-redux'\nimport {setSearchfield, requestRobots} from '../../actions'\n\nimport CardList from '../../components/Cards/CardList';\nimport SearchBox from '../../components/SearchBox/SearchBox';\nimport Scroll from '../../components/Scroll/Scroll'\nimport ErrorBoundry from '../../components/ErrorBoundry/ErrorBoundry';\nimport Header from '../../components/Header/Header';\n\nimport './App.css'\n\nconst mapStateToProps = state => {\n    return {\n        searchfield: state.searchRobots.searchfield,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = dispatch =>  {\n    return {\n        onSearchChange: event => dispatch(setSearchfield(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nfunction App(props) {\n    const {\n        searchfield,\n        onSearchChange,\n        onRequestRobots,\n        robots,\n        isPending\n    } = props;\n\n    useEffect(() => {\n            onRequestRobots()\n        }, [])\n\n    const filteredRobots = robots.filter(robot => {\n        return robot.name.toLowerCase().includes(\n            searchfield.toLowerCase()\n        );\n    })\n\n    if (isPending)\n        return (\n            <div className='tc'>\n                <Header/>\n                <h1>Loading...</h1>\n            </div>\n        );\n    else\n        return (\n            <div className='tc'>\n                <Header/>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filteredRobots}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n        );\n\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchfield = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport {searchRobots, requestRobots} from './reducers'\nimport App from './containers/App/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}